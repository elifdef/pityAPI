<?php
/*=>======~==~==^^***^****^^^^^<^^^^^^^[}^^}^^}^^^^^^^^^(>^^^^^^^^^>[)>^>^^^>^^^*^^^^>]>>^^^^><<
===>==~=~==~~===^^^^^^^^]><^^^^{^>^]^^^#}>^})^><^^^)^(>^>}>^^>^^^^^^><)>*^^^>^^^^^>>>^]>>>^>^><>
===>====~=~=~==<^>^^]^^^)^^>^^]>>>>^^^^{}>>}[>>>^^^^^><(>(}>^)^^<^^^^>}>^^>^^^^>^>>>>^]>>^>>>>>>
>>><^>^^^^^^^^^^^^^[>^^[>^^^^^{>[>})^^<}}]>}[}][^^^^^^<~>^*}>>^^^^^^>>}<((]((((((]]]]]}](]]]]][]
***<********+*^^^^^}>^>}>^^^^^}}}[([^>}#}[]}]}}}>^^^<^<~)>~=>[}<^^^[>>}])()))))((((]]]})((((((]]
***<*^^*+***+*^^^^)}>>>}<>}^^>}}{}>>^>}<}]}}<}[}><)^(^<~~>~~([}>>>>}>>{((((((((((]((]]}(]((((]][
^**<^^*****^^^^^>^}}>>>}><<(>>#}{}(^>}}=<<{}[[}[[{[^]^=-~>][=){}>~>}]<{<)][((((](]((](}((]((]]]]
^**<*^**+*^***^^>>}})>>>}})>>}}}{#>>>{~-<[#}[[[[)#[^^^*[~>--~)*}>~{}{{{()((()))((]]]]]}(]][]]]][
^*^<*^******^^^>>>}})>>{{>}><}}}}}>>}~(}[}}[[[[[}}[>~)=>>^---~~}~+}}}{[)))))(()((]]]][})[[][]][[
***<***^*>^^*^*>>>{><>))}[<}(}{}{[>[~>><}{}<}[[[}}]>~~><]^~~~~~+~~*{}}>])((((()]][[]]]}(]]][]([[
^^^<^**^^^^^^^^<>](<}><+~~[}(#)}=+>{~>><<}<<}#}(}#(+*~<+~@{}}%=~+~}}}<(](((]((((][]((([((]]]]]][
^^^<*^^^*^^^^^^>><><~^<--~>~<{+~-*}>>~~~+~<{}}<#^}(----%}(](*}--=<>}}<))))((((((]]]]((}((]][[]]]
^^^)>^^^*^>>^>^><>>(<>>*-----~---}~#@@{{[<@{~=(>(-------^+>^=^--~[~}}<)))(((]((]]]]]((}(](][][[[
>>>)^^^>^^>>^^*<<<<[~>>~-~=----~**-~^()^~^---^------------------~+~}}<<))((][]][[]]]][}([]]]][[[
^>^)>>^>^>><>>>>>>[}~>>+------~--+---+}+-+~---------------------~~~]}<)))(((]()(][[[[[}([[[[][[[
)))]))))<))))))(><[}}<(>--~---<------~--------------------------~~~]{<~~~][[[}}}}}}}}}{}}}}}}}}}
>^>(^^>>>>>>>>^>>><}}<>>------)>~---~~)-------------------------~~~}{<~~~=====+((]]]]]}]]][]]]]]
*++<+++*++***+++++>[~<)>~-~-~>~>>>~~-~(~----------------------~~~~[{{)((=========><<<<[<<<))<<<<
***)+++*+*****++*~~~>>)>~~+--~+~~~~~~}]+~--------~><>>]~----~~~~~([{{)]]]]>=========+<[<<<<)<)<<
*)><+*********~~~~~^<*+<<~~^~~-~~~~)<<<<>~~~-----~~><<~~~-~+~~~~=#}{{)]](+=========+=+++<<))<<)<
][(>>)^<)<)=~=~~~))==<<<+~~~<<~~~~<<<<<<<<<~~~~~~~~~~~~~~>~~~~~=]]{#{(]]]]}+++++++++++++*++]]][(
])*>[{#*~~~~~~~~~~~~><<<<+~~~~<<~~~~)<<<<<<<~~~~~~=><(~~~~~~~==([]##{[]]]]]*++][[}]^+++<>++++*[[
>]}({(~=~~~~~~~=+*~+==<<<<==>=^(<==~~~=]<<<<<<<===~==>()^=====(]]]##][]]]}]]}]]]][]][[[}*+++++*#
](>^=~~^=~~~~~~~===+==()))*=)=))))^=============())))*======+()]][##(]]]]]]]]]]]]]]]]][[*]+++++}
%#*===================((][++^=))(())))<+===========+)+=====+]+>][[##}[]]]]]]]]]]]]]]][[[](++*++}
+*==========+=======(^))){{^++**((((((((()++==========<=++[]++^[[{#{[[]]]]]]]]]]]]]]][[[[**[[**>
+=*++=====+=======++]](((}#[[]]]^((((((((((((>++++++++++[[*++++[[##}[[]]]]][]]]]]]][[[[[}>>}[[*/
# MAKIMA MODULE V0.1 FOR UPLOAD FILES
# AUTHOR: @elifdef
namespace API\Modules;

use API\Exception\InvalidRoute;

class Makima
{
    # Classes fields
    private string $filename;
    private string $extension;
    private string $uploadDirectory;

    # $_FILES fields
    private string $name;
    private string $type;
    private string $tmp_name;
    private int $error;
    private int $size;


    /**
     * @throws InvalidRoute
     */
    public function __construct(array $file)
    {
        $this->error = $file['error'];

        if ($this->error !== UPLOAD_ERR_OK)
        {
            throw new InvalidRoute(9);
        }

        $this->name = $file['name'];
        $this->type = $file['type'];
        $this->tmp_name = $file['tmp_name'];
        $this->size = $file['size'];

        $this->filename = $this->name;
        $this->extension = $this->getExtension();
    }

    public function setNewName(string $name, bool $randomize = false): void
    {
        $this->filename =
            $randomize ? str_replace('%', bin2hex(random_bytes(15)), $name) : $name;
    }

    public function setUploadDirectory(string $newDirectory): void
    {
        $this->uploadDirectory = $newDirectory;
    }

    public function getFilename(): string
    {
        return "$this->filename.$this->extension";
    }

    public function getName(): string
    {
        return $this->filename;
    }

    public function getFinalPath(): string
    {
        return $this->uploadDirectory . '/' . $this->getFilename();
    }

    public function upload(): bool
    {
        clearstatcache();
        if(!is_dir($this->uploadDirectory))
            mkdir($this->uploadDirectory, 0777, true);
        return move_uploaded_file($this->tmp_name, $this->getFinalPath());
    }

    public function getExtension(): string
    {
        return strtolower(pathinfo($this->name, PATHINFO_EXTENSION));
    }
}